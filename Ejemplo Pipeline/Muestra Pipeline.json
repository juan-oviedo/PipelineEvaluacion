{"files":[{"id":"46e64295-49d9-44b4-b2fc-2a652b499834","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Argentina/Buenos_Aires\",\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"540a066b-ca63-4c1d-986e-67f7b701da14","name":"Código","type":"server_js","source":"function doGet(e) {\n  // Retrieve parameters from the GET request\n  const folderPath \u003d e.parameter.folderPath\n  const fileName \u003d e.parameter.fileName;\n  const formName \u003d e.parameter.formName;\n  const title \u003d e.parameter.title;\n  const descipcion \u003d e.parameter.descipcion;\n  const formId \u003d e.parameter.formId;  // New parameter for form ID (optional)\n  const startElement \u003d parseInt(e.parameter.startElement, 10) || 0;\n  const stopElement \u003d parseInt(e.parameter.stopElement, 10) || 0;\n\n  console.log(\u0027App has started processing.\u0027);\n  console.log(\u0027Parameters received: %s\u0027, JSON.stringify(e.parameter));\n\n  // Call your Aplication function with the parameters\n  const result \u003d Aplication(folderPath, fileName, formName, title, descipcion, formId, startElement, stopElement);\n\n  // Return the URL and form ID as JSON\n  return ContentService.createTextOutput(JSON.stringify(result))\n                        .setMimeType(ContentService.MimeType.JSON);\n}\n\nfunction debug (){\n\n  folderName \u003d \u0027prueba deploy\u0027;\n  fileName \u003d \u0027CSV Paquete 1.csv\u0027;\n  formName \u003d \u0027Formulario Paquete 1\u0027;\n  title \u003d \u0027Paquete 1\u0027;\n  descipcion \u003d \u0027\u0027;\n  formId \u003d \u0027\u0027;\n  startElement \u003d 0;\n  stopElement \u003d 9;\n  Logger.log(\"prueba\");\n  const result \u003d Aplication(folderPath, fileName, formName, title, descipcion, formId, startElement, stopElement);\n}\n\nfunction Aplication(folderPath, fileName, formName, title, descipcion, formId, startElement, stopElement) {\n\n  const csvData \u003d readCSV(fileName);\n  const elementList \u003d parseCSV(csvData, \u0027¬\u0027, \u0027~\u0027);\n\n  const result \u003d createOrOpenForm(folderPath, formName, title, descipcion, elementList, formId, startElement, stopElement);\n  return result;\n}\n\nfunction readCSV(fileName) {\n  // Search for files with the specified name\n  var files \u003d DriveApp.getFilesByName(fileName);\n\n  // Check if the file exists\n  if (!files.hasNext()) {\n    Logger.log(\"Error: File with the name \u0027\" + fileName + \"\u0027 not found.\");\n    throw new Error(\"No se encontro el archivo con nombre \" + fileName);\n  }\n\n  // Handle multiple files with the same name\n  var file \u003d files.next();\n  if (files.hasNext()) {\n    Logger.log(\"Warning: Multiple files with the name \u0027\" + fileName + \"\u0027 found. Using the first one found.\");\n    throw new Error(\"se encontraron multiples archivos con nombre \" + fileName);\n  }\n\n  // Check if the file is empty\n  var csvData \u003d file.getBlob().getDataAsString();\n  if (!csvData.trim()) {\n    Logger.log(\"Error: The file is empty.\");\n    throw new Error(\"el archivo \" + fileName + \" esta vacio\");\n  }\n\n  return csvData;\n}\n\nfunction parseCSV(data, colDelimiter, rowDelimiter){\n  // Split the CSV data by line\n  var rows \u003d data.split(rowDelimiter);\n\n  // Process each row and convert elements to the required types\n  var parsedData \u003d rows.map(function(row) {\n    var elements \u003d row.split(colDelimiter);\n\n    // Parse each element based on the expected data type\n    return [\n      parseInt(elements[0], 10),                        // Convert first element to integer\n      elements[1],                                      // Keep second element as string\n      elements[2],                                      // Keep third element as string\n      elements[3] ? elements[3].split(\u0027,\u0027) : [],        // Convert to array of strings or empty array if empty\n      elements[4] \u003d\u003d\u003d \u0027true\u0027                            // Convert last element to boolean\n    ];\n  });\n  // Remove the last element from parsedData\n  parsedData.pop();\n  parsedData.shift();\n\n  return parsedData;\n}\n\nfunction getFolderByPath(folderPath) {\n  // Remove the trailing slash (if any) and split the folderPath into individual folder names\n  const folderNames \u003d folderPath.replace(/\\/$/, \u0027\u0027).split(\u0027/\u0027);\n  \n  // Start from the root folder\n  let currentFolder \u003d DriveApp.getRootFolder();\n  \n  for (let i \u003d 0; i \u003c folderNames.length; i++) {\n    const folderIterator \u003d currentFolder.getFoldersByName(folderNames[i]);\n    if (folderIterator.hasNext()) {\n      currentFolder \u003d folderIterator.next();\n    } else {\n      throw new Error(`Folder not found: ${folderNames[i]} in path ${folderPath}`);\n    }\n  }\n  return currentFolder;\n}\n\n\nfunction createOrOpenForm(folderPath, nombre, titulo, descripcion, listaElementos, formId, startElement, stopElement) {\n  const folder \u003d getFolderByPath(folderPath);\n  \n  let form;\n  if (formId) {\n    // If formId is provided, open the existing form\n    form \u003d FormApp.openById(formId);\n    Logger.log(\u0027Using existing form: \u0027 + formId);\n  } else {\n    // If no formId is provided, create a new form\n    form \u003d FormApp.create(nombre);\n    form.setTitle(titulo);\n    form.setDescription(descripcion);\n\n    // Move the form to the specified folder\n    DriveApp.getFileById(form.getId()).moveTo(folder);\n  }\n\n    // Start adding elements from the specified index\n  listaElementos.slice(startElement).forEach((item, index) \u003d\u003e {\n    const originalIndex \u003d startElement + index;\n    if (originalIndex \u003e stopElement) {\n    return; // Skip further processing for this element\n  }\n    addElement(form, item);\n  });\n\n  Logger.log(form.getEditUrl());\n  return {\n    url: form.getEditUrl(),\n    formId: form.getId()\n  };\n}\n\nfunction addElement(form, item){\n  switch (item[0]) {\n    //Añadir una Secion\n    case 0:\n      addSecction(form, item[1], item[2]);\n      break;\n\n    //Añadir un texto\n    case 1:\n      addText(form, item[1], item[2]);\n      break;\n\n    //Añadir un multiple choice\n    case 2:\n      addMultipleChoice(form, item[1], item[2], item[3]);\n      break;\n\n    //Añadir un parrafo\n    case 3:\n      addParrafo(form, item[1], item[2], item[4]);\n      break;\n    default:\n      throw new Error(\"No se pudo identificar el elemento a  ingresar\" + item);\n  }\n}\n  \nfunction addSecction(form, titulo, descipcion){\n  form.addPageBreakItem().setTitle(titulo).setHelpText(descipcion);\n}\n\nfunction addText(form, titulo, descipcion) {\n  form.addTextItem()\n    .setTitle(titulo)\n    .setHelpText(descipcion + \"\\nNO ES NECESARIO RESPONDER\")\n    .setRequired(false);\n}\n\nfunction addMultipleChoice(form, titulo, descipcion, valores) {\n  form.addMultipleChoiceItem()\n      .setTitle(titulo)\n      .setHelpText(descipcion)\n      .setChoiceValues(valores)\n      .setRequired(true);\n}\n\nfunction addParrafo(form, titulo, descipcion, obligatorio){\n  form.addParagraphTextItem()\n          .setTitle(titulo)\n          .setHelpText(descipcion)\n          .setRequired(obligatorio);\n}"}]}